import express from "express";
import mongoose from "mongoose";
import cors from "cors";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import multer from "multer";
import webpush from "web-push";
import morgan from "morgan";
import cookieParser from "cookie-parser";
import { createServer } from "http";
import { Server as SocketIOServer } from "socket.io";
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

// Models
import User from "./User.js";
import Message from "./Message.js";

// App setup
const app = express();
const httpServer = createServer(app);
const io = new SocketIOServer(httpServer, {
  cors: {
    origin: "*", // ⚠️ allow frontend from anywhere (you can restrict later)
    methods: ["GET", "POST"],
  },
});

// Middleware
app.use(cors());
app.use(express.json());
app.use(morgan("dev"));
app.use(cookieParser());

// MongoDB connection
mongoose
  .connect(process.env.MONGO_URI || "mongodb://localhost:27017/pinkchat")
  .then(() => console.log("✅ MongoDB connected"))
  .catch((err) => console.error("❌ MongoDB error:", err));

// Multer (file upload config)
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, "uploads/"),
  filename: (req, file, cb) =>
    cb(null, Date.now() + "-" + file.originalname),
});
const upload = multer({ storage });

// Web Push (configure with your keys)
const publicVapidKey = process.env.VAPID_PUBLIC_KEY || "yourPublicKey";
const privateVapidKey = process.env.VAPID_PRIVATE_KEY || "yourPrivateKey";

webpush.setVapidDetails(
  "mailto:example@pinkchat.com",
  publicVapidKey,
  privateVapidKey
);

// JWT auth middleware
const authMiddleware = (req, res, next) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "No token" });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || "secret");
    req.user = decoded;
    next();
  } catch (err) {
    res.status(401).json({ message: "Invalid token" });
  }
};

// Routes
app.get("/", (req, res) => res.send("PinkChat Backend is running 🚀"));

// Register
app.post("/api/register", async (req, res) => {
  const { username, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ username, password: hashedPassword });
  await user.save();
  res.json({ message: "User registered" });
});

// Login
app.post("/api/login", async (req, res) => {
  const { username, password } = req.body;
  const user = await User.findOne({ username });
  if (!user) return res.status(400).json({ message: "User not found" });

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) return res.status(400).json({ message: "Wrong password" });

  const token = jwt.sign(
    { id: user._id, username: user.username },
    process.env.JWT_SECRET || "secret",
    { expiresIn: "1d" }
  );

  res.json({ token });
});

// Get messages
app.get("/api/messages", authMiddleware, async (req, res) => {
  const messages = await Message.find().populate("sender", "username");
  res.json(messages);
});

// Send message
app.post("/api/messages", authMiddleware, async (req, res) => {
  const { text } = req.body;
  const message = new Message({ sender: req.user.id, text });
  await message.save();

  io.emit("message", { user: req.user.username, text }); // real-time
  res.json(message);
});

// Upload file
app.post("/api/upload", upload.single("file"), (req, res) => {
  res.json({ file: req.file });
});

// Push notifications
app.post("/api/subscribe", (req, res) => {
  const subscription = req.body;
  const payload = JSON.stringify({ title: "PinkChat", body: "New message!" });

  webpush
    .sendNotification(subscription, payload)
    .then(() => res.status(201).json({}))
    .catch((err) => console.error(err));
});

// Socket.io
io.on("connection", (socket) => {
  console.log("⚡ New WebSocket connection");
  socket.on("sendMessage", (msg) => {
    io.emit("message", msg);
  });
});

// Start server
const PORT = process.env.PORT || 5000;
httpServer.listen(PORT, () =>
  console.log(`🚀 Server running on port ${PORT}`)
);
